#!/usr/bin/python3
# 파일명 : vul_check_U_13.py
# 취약코드 : U-13(상)
# 점검항목 : SUID, SGID, Sticky bit 설정 파일 점검
# 점검내용 : 불필요하거나 악의적인 파일에 SUID, SGID 설정 여부 점검
# 양호기준 : 주요 실행파일의 권한에 SUID와 SGID에 대한 설정이 부여되어 있지 않은 경우
# 취약기준 : 주요 실행파일의 권한에 SUID와 SGID에 대한 설정이 부여되어 있는 경우

import os
import re
import datetime
import pickle

good = "\033[94m양호\033[0m"
bad = "\033[91m취약\033[0m"

class Time:
    def __init__(self, filename):
        file = os.popen(f"stat {filename}")
        read = file.read()
        file.close()
        
        pat_atime = re.compile(r"Access[:][ \t]+(?P<text>\d{4}[-](0[1-9]|1[012])[-]\d{2}[ \t]+\d{2}[:]\d{2}[:]\d{2}([.]\d+)?[ \t]+([+]\d{4})?)", re.IGNORECASE)
        text = pat_atime.search(read).group('text')
        self.atime = self.text_to_datetime(text)
        
        pat_mtime = re.compile(r"Modify[:][ \t]+(?P<text>\d{4}[-](0[1-9]|1[012])[-]\d{2}[ \t]+\d{2}[:]\d{2}[:]\d{2}([.]\d+)?[ \t]+([+]\d{4})?)", re.IGNORECASE)
        text = pat_mtime.search(read).group('text')
        self.mtime = self.text_to_datetime(text)
        
        pat_ctime = re.compile(r"Change[:][ \t]+(?P<text>\d{4}[-](0[1-9]|1[012])[-]\d{2}[ \t]+\d{2}[:]\d{2}[:]\d{2}([.]\d+)?[ \t]+([+]\d{4})?)", re.IGNORECASE)
        text = pat_ctime.search(read).group('text')
        self.ctime = self.text_to_datetime(text)
        
    def text_to_datetime(self, text):
        pat = re.compile(r"(?P<YY>\d{4})[-](?P<mm>\d{2})[-](?P<dd>\d{2})[ \t]+(?P<HH>\d{2})[:](?P<MM>\d{2})[:](?P<SS>\d{2})([.](?P<ss>\d+))?[ \t]+([+]\d{4})?")
        match = pat.search(text)
        YY = int(match.group("YY"))
        mm = int(match.group("mm"))
        dd = int(match.group("dd"))
        HH = int(match.group("HH"))
        MM = int(match.group("MM"))
        SS = int(match.group("SS"))
        date = datetime.datetime(YY, mm, dd, HH, MM, SS)
        return date

class PermBool:
    def __init__(self, perm):
        code_ref = {'---':0, '--x':1, '-w-':2, '-wx':3,
                    'r--':4, 'r-x':5, 'rw-':6, 'rwx':7,
                    '--S':0, '--s':1, '-wS':2, '-ws':3,
                    'r-S':4, 'r-s':5, 'rwS':6, 'rws':7,
                    '--T':0, '--t':1, '-wT':2, '-wt':3,
                    'r-T':4, 'r-t':5, 'rwT':6, 'rwt':7 }
        self.perm = perm
        self.code   = code_ref[self.perm]
        self.is_read    = True if perm[0] == 'r' else False
        self.is_write   = True if perm[1] == 'w' else False
        self.is_execute  = True if perm[2] in ('x', 's', 't') else False
        self.is_setuid  = True if perm[2] in ('S', 's') else False
        self.is_setgid  = True if perm[2] in ('S', 's') else False
        self.is_sticky  = True if perm[2] in ('T', 't') else False

class Perm:
    def __init__(self, perm):
        pat = re.compile(r"(?P<user>[rwxsS-]{3})(?P<group>[rwxsS-]{3})(?P<other>[rwxtT-]{3})")
        match = pat.match(perm)
        self.perm    = perm
        self.user    = PermBool(match.group('user'))
        self.group   = PermBool(match.group('group'))
        self.other   = PermBool(match.group('other'))

class LS:
    def __init__(self, filename):
        os.environ['LANG'] = 'en_US.UTF-8'
        
        file = os.popen(f'ls -l {filename}')
        read = file.read().strip()
        file.close()
        
        pat = re.compile(r"[-dl](?P<perm>[rwxsS-]{3}[rwxsS-]{3}[rwxtT-]{3})[.]?[ \t]+\d+[ \t]+(?P<username>[\w-]+)[ \t]+(?P<groupname>[\w-]+)[ \t]+(?P<size>\d+)")
        match = pat.search(read)
        self.username   = match.group("username")
        self.groupname  = match.group("groupname")
        self.size       = int(match.group("size"))
        self.perm       = Perm(match.group("perm"))
        self.time       = Time(filename)

def make_setuid_list():
    file = os.popen("find / -xdev -and -perm -u=s -and -type f -and -print")
    read = file.read()
    file.close()
    filename_list = read.strip().split('\n')
    setuid_list = {}
    for filename in filename_list:
        obj = LS(filename)
        setuid_list[filename] = obj
    return setuid_list
    
answer = input("새로운 setuid_list를 생성할까요? [yes/no] :")
if answer.lower() in ('yes','ye', 'y'):
    setuid_list = make_setuid_list()
    file = open("setuid_list.bin", 'wb')
    pickle.dump(setuid_list, file)
    file.close()
    exit()

    
print("\033[94mSetUID 파일 점검을 시작합니다.\033[0m")
ref_setuid_list = pickle.load(open("setuid_list.bin", 'rb')) # 기본 상태
setuid_list = make_setuid_list() # 현재 상태

for filename in setuid_list.keys(): # .keys()가 없으면 기본 keys값으로 비교됨
    if filename not in ref_setuid_list:
        print(f"\033[91m취약 : SetUID bit가 설정된 새로운 파일 발견 : {filename}\033[0m")
    else:
        con_user = ref_setuid_list[filename].username == setuid_list[filename].username
        con_perm = ref_setuid_list[filename].perm.perm == setuid_list[filename].perm.perm
        con_ctime = ref_setuid_list[filename].time.ctime == setuid_list[filename].time.ctime
        con_mtime = ref_setuid_list[filename].time.mtime == setuid_list[filename].time.mtime
        
        if con_user and con_perm and con_ctime and con_mtime:
            pass
        else:
            print(f"\033[91m취약 :속성이 변경된 파일 발견 : {filename}\033[0m")
            if con_user:
                print(f"     - 소유주 변경 : {setuid_list[filename].username}")
            if con_perm:
                print(f"     - 퍼미션 변경 : {setuid_list[filename].perm.perm}")
            if con_ctime:
                print(f"     - ctime 변경 : {setuid_list[filename].time.ctime}")
            if con_mtime:
                print(f"     - mtime 변경 : {setuid_list[filename].time.mtime}")

            
        
    
