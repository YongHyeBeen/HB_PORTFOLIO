#!/usr/bin/python3
# 파일명 : vul_check_U_02.py
# 취약코드 : U-02 (상)
# 점검항목 : 패스워드 복잡성 설정
# 점검내용 : 시스템 정책에 사용자 계정(root 및 일반계정 모두 해당) 패스워드 복잡성 관련 설정이 되어 있는지 점검
# 양호기준 : 패스워드 최소길이 8자리 이상, 영문·숫자·특수문자 최소 입력 기능이 설정된 경우
# 취약기준 : 패스워드 최소길이 8자리 이상, 영문·숫자·특수문자 최소 입력 기능이 설정된 경우

import os.path
import re

good = "\033[94m양호\033[0m"
bad = "\033[91m취약\033[0m"

class MinLen:
    count = 9
    def __init__(self, read):  
        pat_minlen = re.compile(r"^minlen[ \t]*[=][ \t]*(?P<count>[0-9]+)", re.MULTILINE|re.IGNORECASE)    
        match = pat_minlen.search(read)
        if match: self.count = int(match.group('count'))
    def vulner(self):
        if self.count < 8: return True
        else:               return False
       
class DCredit:
    count = 1
    def __init__(self, read):
        pat_dcredit     = re.compile(r"^dcredit[ \t]*[=][ \t]*(?P<count>[-]?[0-9]+)", re.MULTILINE|re.IGNORECASE)
        match = pat_dcredit.search(read)
        if match: self.count = int(match.group('count'))  
    def vulner(self):
        if self.count == 0 : return True
        else:                return False

class UCredit:
    count = 1
    def __init__(self, read):
        pat_ucredit = re.compile(r"^ucredit[ \t]*[=][ \t]*(?P<count>[-]?[0-9]+)", re.MULTILINE|re.IGNORECASE)
        match = pat_ucredit.search(read)
        if match: self.count = int(match.group('count'))
    def vulner(self):
        if self.count == 0 : return True
        else:                return False    

class LCredit:
    count = 1
    def __init__(self, read):
        pat_lcredit = re.compile(r"^lcredit[ \t]*[=][ \t]*(?P<count>[-]?[0-9]+)", re.MULTILINE|re.IGNORECASE)
        match = pat_lcredit.search(read)
        if match: self.count = int(match.group('count'))  
    def vulner(self):
        if self.count == 0 : return True
        else:                return False            

class OCredit:
    count = 1
    def __init__(self, read):
        pat_ocredit = re.compile(r"^ocredit[ \t]*[=][ \t]*(?P<count>[-]?[0-9]+)", re.MULTILINE|re.IGNORECASE)
        match = pat_ocredit.search(read)
        if match: self.count = int(match.group('count'))  
    def vulner(self):
        if self.count == 0 : return True
        else:                return False 

class MinClass:
    count = 0
    def __init__(self, read):
        pat_minclass = re.compile(r"^minclass[ \t]*[=][ \t]*(?P<count>[0-9]+)", re.MULTILINE|re.IGNORECASE)
        match = pat_minclass.search(read)
        if match: self.count = int(match.group('count'))  
    def vulner(self):
        if self.count < 3 : return True
        else:                return False 

class PwQuality:
    def __init__(self, filename):        # construct
        try:
            file = open(filename, 'r')
        except FileNotFoundError:
            raise ValueError
        else:
            read = file.read()
            file.close()
        
        self.minlen = MinLen(read)
        self.dcredit = DCredit(read)
        self.ucredit = UCredit(read)
        self.lcredit = LCredit(read)
        self.ocredit = OCredit(read)
        self.minclass = MinClass(read)

    def vulner(self):
        if (self.minlen.vulner() or self.dcredit.vulner()
        or self.ucredit.vulner() or self.lcredit.vulner()
        or self.ocredit.vulner() or self.minclass.vulner()):
            return True
        else:
            return False

filename = '/etc/security/pwquality.conf'
obj = PwQuality(filename)

if not obj.vulner():
    print(f"{good} : 패스워드 복잡성 정책이 만족함")
else:
    print(f"{bad} : 패스워드 복잡성 정책이 만족하지 않음")
    if obj.minlen.vulner()   : print("       - 최소길이를 만족하지 않음")
    if obj.dcredit.vulner()  : print("       - 숫자(0 ~ 9)를 포함하지 않음")
    if obj.ucredit.vulner()  : print("       - 영문자 대문자를 포함하지 않음")
    if obj.lcredit.vulner()  : print("       - 영문자 소문자를 포함하지 않음")
    if obj.ocredit.vulner()  : print("       - 특수문자를 포함하지 않음")
    if obj.minclass.vulner() : print("       - 최소 클래스를 만족하지 않음")
    
